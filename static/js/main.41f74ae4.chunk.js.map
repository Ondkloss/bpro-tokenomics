{"version":3,"sources":["TokenPie.js","Utils.js","TokenArea.js","TokenCirculating.js","Sources.js","Links.js","App.js","reportWebVitals.js","index.js"],"names":["options","chart","type","title","text","undefined","credits","enabled","series","data","name","y","pie","highcharts","Highcharts","calculateIntermediatePoints","startX","startY","endX","endY","result","gapY","i","push","addPoints","startPoint","numberOfStartPoints","endPoint","numberOfEndPoints","concat","Array","fill","console","log","numberToYearMonthString","number","month","year","Math","floor","getListOfYearMonthStrings","from","to","plotOptions","area","stacking","marker","symbol","tooltip","shared","formatter","sum","this","points","forEach","point","numberFormat","x","xAxis","categories","tickInterval","slice","ListGroup","className","Item","numberOfMonthsCovered","circulating","sources","href","links","size","App","Container","Row","Card","Body","Title","Subtitle","TokenPie","TokenArea","TokenCirculating","Sources","Links","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41f74ae4.chunk.js","sourcesContent":["import React from 'react'\r\nimport Highcharts from 'highcharts/highstock'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nconst options = {\r\n    chart: {\r\n        type: 'pie'\r\n    },\r\n    title: {\r\n        text: undefined\r\n    },\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    series: [{\r\n        data: [{\r\n            name: \"Reservoir (Treasury), distributed over 4 years\",\r\n            y: 1_325_000 * 4\r\n        }, {\r\n            name: \"Developer fund, distributed over 4 years\",\r\n            y: 825_000 * 4\r\n        }, {\r\n            name: \"Maker pre-genesis users, instant distribution\",\r\n            y: 500_000\r\n        }, {\r\n            name: \"Compound pre-genesis users, instant distribution\",\r\n            y: 500_000\r\n        }, {\r\n            name: \"Genesis liquidity mining, distributed over 3 months\",\r\n            y: 250_000\r\n        }, {\r\n            name: \"Genesis backstop, instant distribution\",\r\n            y: 150_000\r\n        }]\r\n    }]\r\n}\r\n\r\nconst pie = () => <HighchartsReact\r\n    highcharts={Highcharts}\r\n    options={options}\r\n/>\r\n\r\nexport default pie","const calculateIntermediatePoints = (startX, startY, endX, endY) => {\r\n    const result = []\r\n    const diffY = endY - startY;\r\n    const gapY = diffY / (endX - startX);\r\n\r\n    for (let i = startX; i <= endX; i++) {\r\n        result.push([i, startY + (gapY * i)])\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nconst addPoints = (data, startPoint, numberOfStartPoints, endPoint, numberOfEndPoints) => {\r\n    const result = [].concat(Array(numberOfStartPoints).fill(startPoint), data, Array(numberOfEndPoints).fill(endPoint))\r\n    console.log(result)\r\n    return result\r\n}\r\n\r\n// Assumption: All data starts at 0 meaning April 2021, and then increases month by month\r\nconst numberToYearMonthString = (number) => {\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n    const month = ((number % 12) + 3) % 12\r\n    const year = Math.floor(((number + 3) / 12) + 2021)\r\n\r\n    return months[month]+\" \"+year\r\n}\r\n\r\nconst getListOfYearMonthStrings = (from, to) => {\r\n    const result = []\r\n\r\n    for(let i = from; i <= to; i++) {\r\n        result.push(numberToYearMonthString(i))\r\n    }\r\n\r\n    console.log(result)\r\n    return result\r\n}\r\n\r\nexport {\r\n    calculateIntermediatePoints,\r\n    addPoints,\r\n    getListOfYearMonthStrings\r\n}","import React from 'react'\r\nimport Highcharts from 'highcharts/highstock'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport { calculateIntermediatePoints, getListOfYearMonthStrings } from './Utils'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nconst options = {\r\n    chart: {\r\n        type: 'area',\r\n    },\r\n    title: {\r\n        text: undefined\r\n    },\r\n    plotOptions: {\r\n        area: {\r\n            stacking: \"Normal\"\r\n        },\r\n        series: {\r\n            marker: {\r\n                enabled: false,\r\n                symbol: \"circle\"\r\n            }\r\n        }\r\n    },\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    tooltip: {\r\n        shared: true,\r\n        formatter: function () {\r\n            let result = \"\";\r\n            let sum = 0;\r\n\r\n            this.points.forEach(point => {\r\n                result += point.series.name + \": <b>\" + Highcharts.numberFormat(point.y, 0) + \"</b><br/>\"\r\n                sum += point.y\r\n            })\r\n\r\n            result = \"<b>\" + this.points[0].x + \" <> \" + this.points[0].point.x + \" months (Total: \" + Highcharts.numberFormat(sum, 0) + \")</b><br />\" + result\r\n\r\n            return result;\r\n        }\r\n    },\r\n    xAxis: {\r\n        type: 'category',\r\n        categories: getListOfYearMonthStrings(0, 49),\r\n        tickInterval: 3\r\n    },\r\n    series: [{\r\n        name: \"Reservoir (Treasury)\",\r\n        data: calculateIntermediatePoints(0, 0, 48, 1_325_000 * 4, 49)\r\n    }, {\r\n        name: \"Developer fund\",\r\n        data: calculateIntermediatePoints(0, 0, 48, 825_000 * 4, 49)\r\n    }, {\r\n        name: \"Maker pre-genesis users\",\r\n        data: calculateIntermediatePoints(0, 500_000, 48, 500_000, 49)\r\n    }, {\r\n        name: \"Compound pre-genesis users\",\r\n        data: calculateIntermediatePoints(0, 500_000, 48, 500_000, 49)\r\n    }, {\r\n        name: \"Genesis backstop\",\r\n        data: calculateIntermediatePoints(0, 150_000, 48, 150_000, 49)\r\n    }, {\r\n        name: \"Genesis liquidity mining\",\r\n        data: []\r\n            .concat(calculateIntermediatePoints(0, 0, 3, 250_000, 4).slice(0, -1))\r\n            .concat(calculateIntermediatePoints(3, 250_000, 48, 250_000, 46))\r\n    }]\r\n}\r\n\r\nconst area = () => <>\r\n    <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={options}\r\n    />\r\n    <ListGroup className=\"mx-5\">\r\n        <ListGroup.Item>\r\n            <b>Reservoir (Treasury):</b> Issuance is 1 325 000 per year, for 4 years\r\n        </ListGroup.Item>\r\n        <ListGroup.Item>\r\n            <b>Developer fund:</b> Issuance is 825 000 per year, for 4 years\r\n        </ListGroup.Item>\r\n    </ListGroup>\r\n</>\r\n\r\nexport default area","import React from 'react'\r\nimport Highcharts from 'highcharts/highstock'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport { Badge, ListGroup } from 'react-bootstrap';\r\nimport { addPoints, getListOfYearMonthStrings } from './Utils';\r\n\r\nconst numberOfMonthsCovered = 8\r\n\r\nconst options = {\r\n    chart: {\r\n        type: 'area',\r\n    },\r\n    title: {\r\n        text: undefined\r\n    },\r\n    plotOptions: {\r\n        area: {\r\n            stacking: \"Normal\"\r\n        },\r\n        series: {\r\n            marker: {\r\n                enabled: false,\r\n                symbol: \"circle\"\r\n            }\r\n        }\r\n    },\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    tooltip: {\r\n        shared: true,\r\n        formatter: function () {\r\n            let result = \"\";\r\n            let sum = 0;\r\n\r\n            this.points.forEach(point => {\r\n                result += point.series.name + \": <b>\" + Highcharts.numberFormat(point.y, 0) + \"</b><br/>\"\r\n                sum += point.y\r\n            })\r\n\r\n            result = \"<b>\" + this.points[0].x+\" <> \"+this.points[0].point.x + \" months (Total: \" + Highcharts.numberFormat(sum, 0) + \")</b><br />\" + result\r\n\r\n            return result;\r\n        }\r\n    },\r\n    xAxis: {\r\n        type: 'category',\r\n        categories: getListOfYearMonthStrings(0, numberOfMonthsCovered - 1)\r\n    },\r\n    series: [{\r\n        name: \"Maker pre-genesis users\",\r\n        data: addPoints(500_000, undefined, 0, 500_000, numberOfMonthsCovered - 1)\r\n    }, {\r\n        name: \"Compound pre-genesis users\",\r\n        data: addPoints(500_000, undefined, 0, 500_000, numberOfMonthsCovered - 1)\r\n    }, {\r\n        name: \"Genesis backstop\",\r\n        data: addPoints(150_000, undefined, 0, 150_000, numberOfMonthsCovered - 1)\r\n    }, {\r\n        name: \"Genesis liquidity mining\",\r\n        data:  addPoints(250_000, 0, 3, 250_000, numberOfMonthsCovered - 1 - 3)\r\n    }]\r\n}\r\n\r\nconst circulating = () =>\r\n    <>\r\n        <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}\r\n        />\r\n        <ListGroup className=\"mx-5\">\r\n            <ListGroup.Item>\r\n                <b>April 2021 (0 months):</b> 1 150 000 - Genesis distribution to Maker, Compound and backstop<br />\r\n                <b>Source:</b> One time minting\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n                <b>July 2021 (3 months):</b>: 250 000 - Genesis liquidity mining distributed<br />\r\n                <b>Source:</b> One time minting\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n                <b>Soon:</b> 30 000 or 90 000 - Second liquidity mining period KPI options<br />\r\n                <b>Source:</b> Reservoir (Treasury)\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n                <b>Soon:</b> 500 000 - Venture capital round<br />\r\n                <b>Source:</b> Developer fund\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    </>\r\n\r\nexport default circulating","\r\nimport React from 'react'\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nconst bproGenesis = \"https://forum.bprotocol.org/t/b-protocol-governance-token/48\"\r\nconst secondLiquidityMining = \"https://forum.bprotocol.org/t/bip-4-use-umas-kpi-options-program-for-users-liquidity-mining/167\"\r\n\r\nconst sources = () => <ListGroup className=\"mx-5\">\r\n    <ListGroup.Item>\r\n        <a href={bproGenesis}>B.Protocol Governance Token</a>\r\n    </ListGroup.Item>\r\n    <ListGroup.Item>\r\n        <a href={secondLiquidityMining}>BIP #4 - Use UMA's KPI Options Program for users' Liquidity Mining</a>\r\n    </ListGroup.Item>\r\n</ListGroup>\r\n\r\nexport default sources","\r\nimport React from 'react'\r\nimport { Github, Discord } from 'react-bootstrap-icons'\r\n\r\nconst github = \"https://github.com/Ondkloss/bpro-tokenomics\"\r\nconst discord = \"https://discord.gg/bJ4guuw\"\r\n\r\nconst links = () => <div>\r\n    <a href={github}><Github size={32} className=\"mx-2\" /></a>\r\n    <a href={discord}><Discord size={32} className=\"mx-2\" /></a>\r\n</div>\r\n\r\nexport default links\r\n","import React from 'react'\r\nimport TokenPie from './TokenPie'\r\nimport TokenArea from './TokenArea'\r\nimport TokenCirculating from './TokenCirculating'\r\nimport Sources from './Sources'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Card, Container, Row } from 'react-bootstrap';\r\nimport Links from './Links'\r\n\r\nconst App = () => <Container>\r\n  <Row className=\"mx-1 mt-2\">\r\n    <h1 className=\"text-center\">Community made BPRO Tokenomics</h1>\r\n    <p className=\"text-muted text-center\">Highly unofficial, but based on best knowledge</p>\r\n  </Row>\r\n  <Row className=\"mx-1\">\r\n    <Card className=\"my-2\">\r\n      <Card.Body>\r\n        <Card.Title className=\"text-center\">BPRO distribution total</Card.Title>\r\n      <Card.Subtitle className=\"mb-2 text-muted text-center\">Distribution total, after all distribution has ended (10 million)</Card.Subtitle>\r\n        <TokenPie />\r\n      </Card.Body>\r\n    </Card>\r\n  </Row>\r\n  <Row className=\"mx-1\"><Card className=\"my-2\">\r\n    <Card.Body>\r\n      <Card.Title className=\"text-center\">BPRO distribution over time</Card.Title>\r\n      <Card.Subtitle className=\"mb-2 text-muted text-center\">Starting 26th of April, 2021 and ending 26th of April, 2025 (4 years)</Card.Subtitle>\r\n      <TokenArea />\r\n    </Card.Body>\r\n  </Card>\r\n  </Row>\r\n  <Row className=\"mx-1\"><Card className=\"my-2\">\r\n    <Card.Body>\r\n      <Card.Title className=\"text-center\">Circulating supply</Card.Title>\r\n      <Card.Subtitle className=\"mb-2 text-muted text-center\">What has been distributed (not well defined or complete, description in tooltip)</Card.Subtitle>\r\n      <TokenCirculating />\r\n    </Card.Body>\r\n  </Card>\r\n  </Row>\r\n  <Row className=\"mx-1 mb-3\"><Card className=\"my-2\">\r\n    <Card.Body>\r\n      <Card.Title className=\"text-center\">Sources</Card.Title>\r\n      <Sources />\r\n    </Card.Body>\r\n  </Card>\r\n  </Row>\r\n  <Row className=\"mx-1 mb-3 text-center\">\r\n      <Links />\r\n  </Row>\r\n</Container>\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}