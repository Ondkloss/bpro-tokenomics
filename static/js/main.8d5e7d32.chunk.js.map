{"version":3,"sources":["TokenPie.js","Utils.js","TokenArea.js","TokenCirculating.js","Sources.js","App.js","reportWebVitals.js","index.js"],"names":["options","chart","type","title","text","undefined","credits","enabled","series","data","name","y","pie","highcharts","Highcharts","calculateIntermediatePoints","startX","startY","endX","endY","result","gapY","i","push","plotOptions","area","stacking","marker","symbol","tooltip","shared","formatter","sum","this","points","forEach","point","numberFormat","x","concat","slice","headerFormat","pointFormatter","circulating","ListGroup","Item","sources","href","App","Container","Row","className","Card","Body","Title","Subtitle","TokenPie","TokenArea","TokenCirculating","Sources","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d5e7d32.chunk.js","sourcesContent":["import React from 'react'\r\nimport Highcharts from 'highcharts/highstock'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nconst options = {\r\n    chart: {\r\n        type: 'pie'\r\n    },\r\n    title: {\r\n        text: undefined\r\n    },\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    series: [{\r\n        data: [{\r\n            name: \"Reservoir (Treasury), distributed over 4 years\",\r\n            y: 1_325_000 * 4\r\n        }, {\r\n            name: \"Developer fund, distributed over 4 years\",\r\n            y: 825_000 * 4\r\n        }, {\r\n            name: \"Maker pre-genesis users, instant distribution\",\r\n            y: 500_000\r\n        }, {\r\n            name: \"Compound pre-genesis users, instant distribution\",\r\n            y: 500_000\r\n        }, {\r\n            name: \"Genesis liquidity mining, distributed over 3 months\",\r\n            y: 250_000\r\n        }, {\r\n            name: \"Genesis backstop, instant distribution\",\r\n            y: 150_000\r\n        }]\r\n    }]\r\n}\r\n\r\nconst pie = () => <HighchartsReact\r\n    highcharts={Highcharts}\r\n    options={options}\r\n/>\r\n\r\nexport default pie","const calculateIntermediatePoints = (startX, startY, endX, endY) => {\r\n    const result = []\r\n    const diffY = endY - startY;\r\n    const gapY = diffY / (endX - startX);\r\n\r\n    for (let i = startX; i <= endX; i++) {\r\n        result.push([i, startY + (gapY * i)])\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport {\r\n    calculateIntermediatePoints\r\n}","import React from 'react'\r\nimport Highcharts from 'highcharts/highstock'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport { calculateIntermediatePoints } from './Utils'\r\n\r\nconst options = {\r\n    chart: {\r\n        type: 'area',\r\n    },\r\n    title: {\r\n        text: undefined\r\n    },\r\n    plotOptions: {\r\n        area: {\r\n            stacking: \"Normal\"\r\n        },\r\n        series: {\r\n            marker: {\r\n                enabled: false,\r\n                symbol: \"circle\"\r\n            }\r\n        }\r\n    },\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    tooltip: {\r\n        shared: true,\r\n        formatter: function () {\r\n            let result = \"\";\r\n            let sum = 0;\r\n\r\n            this.points.forEach(point => {\r\n                result += point.series.name + \": <b>\" + Highcharts.numberFormat(point.y, 0) + \"</b><br/>\"\r\n                sum += point.y\r\n            })\r\n\r\n            result = \"<b>\" + this.points[0].x + \" months (Total: \" + Highcharts.numberFormat(sum, 0) + \")</b><br />\" + result;\r\n\r\n            return result;\r\n        }\r\n    },\r\n    series: [{\r\n        name: \"Reservoir (Treasury)\",\r\n        data: calculateIntermediatePoints(0, 0, 48, 1_325_000 * 4, 49)\r\n    }, {\r\n        name: \"Developer fund\",\r\n        data: calculateIntermediatePoints(0, 0, 48, 825_000 * 4, 49)\r\n    }, {\r\n        name: \"Maker pre-genesis users\",\r\n        data: calculateIntermediatePoints(0, 500_000, 48, 500_000, 49)\r\n    }, {\r\n        name: \"Compound pre-genesis users\",\r\n        data: calculateIntermediatePoints(0, 500_000, 48, 500_000, 49)\r\n    }, {\r\n        name: \"Genesis backstop\",\r\n        data: calculateIntermediatePoints(0, 150_000, 48, 150_000, 49)\r\n    }, {\r\n        name: \"Genesis liquidity mining\",\r\n        data: []\r\n            .concat(calculateIntermediatePoints(0, 0, 3, 250_000, 4).slice(0, -1))\r\n            .concat(calculateIntermediatePoints(3, 250_000, 48, 250_000, 46))\r\n    }]\r\n}\r\n\r\nconst area = () => <HighchartsReact\r\n    highcharts={Highcharts}\r\n    options={options}\r\n/>\r\n\r\nexport default area","import React from 'react'\r\nimport Highcharts from 'highcharts/highstock'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nconst options = {\r\n    chart: {\r\n        type: 'area',\r\n    },\r\n    title: {\r\n        text: undefined\r\n    },\r\n    plotOptions: {\r\n        area: {\r\n            stacking: \"Normal\"\r\n        },\r\n        series: {\r\n            marker: {\r\n                enabled: false,\r\n                symbol: \"circle\"\r\n            }\r\n        }\r\n    },\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    tooltip: {\r\n        shared: true,\r\n        headerFormat: \"<b>{point.key} months</b><br/>\",\r\n        pointFormatter: function () {\r\n            return this.series.name + \": <b> \" + Highcharts.numberFormat(this.y, 0) + \" </b> <br/> \";\r\n        }\r\n    },\r\n    series: [{\r\n        name: \"Circulating supply\",\r\n        data: [{\r\n            name: \"0 months: Genesis distribution to Maker, Compound and backstop\",\r\n            y: 1_150_000\r\n        }, {\r\n            y: 1_150_000\r\n        }, {\r\n            y: 1_150_000\r\n        }, {\r\n            name: \"3 months: Genesis liquidity mining distributed\",\r\n            y: 1_400_000\r\n        }, {\r\n            y: 1_400_000\r\n        }, {\r\n            y: 1_400_000\r\n        }, {\r\n            y: 1_400_000\r\n        }, {\r\n            y: 1_400_000\r\n        }]\r\n    }]\r\n}\r\n\r\nconst circulating = () =>\r\n    <>\r\n        <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}\r\n        />\r\n        <ListGroup>\r\n            <ListGroup.Item>\r\n                0 months: 1 150 000: Genesis distribution to Maker, Compound and backstop\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n                3 months: 250 000: Genesis liquidity mining distributed\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    </>\r\n\r\nexport default circulating","\r\nimport React from 'react'\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nconst forum = \"https://forum.bprotocol.org/t/b-protocol-governance-token/48\";\r\n\r\nconst sources = () => <ListGroup>\r\n    <ListGroup.Item>\r\n        <a href={forum}>BPRO governance token</a>\r\n    </ListGroup.Item>\r\n</ListGroup>\r\n\r\nexport default sources","import React from 'react'\nimport TokenPie from './TokenPie'\nimport TokenArea from './TokenArea'\nimport TokenCirculating from './TokenCirculating'\nimport Sources from './Sources'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Container, Row } from 'react-bootstrap';\n\nconst App = () => <Container>\n  <Row className=\"mx-1 mt-2\">\n    <h1 className=\"text-center\">Community made BPRO Tokenomics</h1>\n    <p className=\"text-muted text-center\">Highly unofficial, but based on best knowledge</p>\n  </Row>\n  <Row className=\"mx-1\">\n    <Card className=\"my-2\">\n      <Card.Body>\n        <Card.Title className=\"text-center\">BPRO distribution total</Card.Title>\n      <Card.Subtitle className=\"mb-2 text-muted text-center\">Distribution total, after all distribution has ended (10 million)</Card.Subtitle>\n        <TokenPie />\n      </Card.Body>\n    </Card>\n  </Row>\n  <Row className=\"mx-1\"><Card className=\"my-2\">\n    <Card.Body>\n      <Card.Title className=\"text-center\">BPRO distribution over time</Card.Title>\n      <Card.Subtitle className=\"mb-2 text-muted text-center\">Starting 26th of April, 2021 and ending 26th of April, 2025 (4 years)</Card.Subtitle>\n      <TokenArea />\n    </Card.Body>\n  </Card>\n  </Row>\n  <Row className=\"mx-1\"><Card className=\"my-2\">\n    <Card.Body>\n      <Card.Title className=\"text-center\">Circulating supply</Card.Title>\n      <Card.Subtitle className=\"mb-2 text-muted text-center\">What has been distributed (not well defined or complete, description in tooltip)</Card.Subtitle>\n      <TokenCirculating />\n    </Card.Body>\n  </Card>\n  </Row>\n  <Row className=\"mx-1\"><Card className=\"my-2\">\n    <Card.Body>\n      <Card.Title className=\"text-center\">Sources</Card.Title>\n      <Sources />\n    </Card.Body>\n  </Card>\n  </Row>\n</Container>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}